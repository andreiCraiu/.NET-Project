{
  "version": 3,
  "file": "ngx-input-star-rating.umd.min.js",
  "sources": [
    "ng://ngx-input-star-rating/out/ngx-input-star-rating.component.ts",
    "ng://ngx-input-star-rating/out/ngx-input-star-rating.module.ts"
  ],
  "sourcesContent": [
    "import { forwardRef, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst starIcons = {\n  outline: 'outline',\n  full: 'full',\n  half: 'half'\n};\n\n@Component({\n  selector: 'ngx-input-star-rating',\n  template: `<div class=\"input-rating\" (mouseleave)=\"mouseLeave()\">\n  <button type=\"button\" [disabled]=\"disabled\" *ngFor=\"let btn of buttons; let i = index\" class=\"input-rating__btn\" (click)=\"rate(i)\" [attr.aria-label]=\"'rate ' + (i + 1) + ' of ' + buttons.length\"\n    (mouseenter)=\"mouseEnter(i)\">\n    <span *ngIf=\"btn.active || btn.icon === starIcons.full\" class=\"full\">\n      <ng-container *ngTemplateOutlet=\"star\"></ng-container>\n    </span>\n    <ng-container *ngIf=\"!btn.active\">\n      <span *ngIf=\"btn.icon === starIcons.half\" class=\"half\">\n        <ng-container *ngTemplateOutlet=\"star\"></ng-container>\n        <svg height=\"25\" width=\"10\" class=\"star-half\">\n          <polygon points=\"9.9, 1.1, 3.3, 21.78, 19.8, 8.58, 0, 8.58, 16.5, 21.78\" style=\"fill-rule:nonzero;\"/>\n        </svg>\n      </span>\n      <span *ngIf=\"btn.icon !== starIcons.full && btn.icon !== starIcons.half\" class=\"empty\">\n        <ng-container *ngTemplateOutlet=\"star\"></ng-container>\n      </span>\n    </ng-container>\n  </button>\n</div>\n\n<ng-template #star>\n  <svg height=\"25\" width=\"23\" class=\"star\">\n    <polygon points=\"9.9, 1.1, 3.3, 21.78, 19.8, 8.58, 0, 8.58, 16.5, 21.78\" style=\"fill-rule:nonzero;\"/>\n  </svg>\n</ng-template>`,\n  styles: [`*, *::before, *::after{\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box; }\n\n:host{\n  display:inline-block; }\n\n.star{\n  fill:#ccc; }\n\n.full .star{\n  fill:gold; }\n\n.half .star-half{\n  fill:gold; }\n\nbutton{\n  background-color:transparent;\n  border:0;\n  cursor:pointer;\n  position:relative;\n  width:30px;\n  height:25px; }\n  button svg{\n    position:absolute;\n    top:0;\n    left:5px; }\n`],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxInputStarRatingComponent),\n      multi: true\n    }\n  ]\n})\nexport class NgxInputStarRatingComponent implements ControlValueAccessor, OnInit, OnChanges {\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = val;\n    this.onChange(val);\n    this.valueUpdate(this._value);\n    this.onTouched();\n  }\n\n  @Input('value') _value = 0;\n  @Input() count = 5;\n  @Input() disabled = false;\n\n  readonly starIcons = starIcons;\n\n  buttons: { active: boolean; icon: string }[] = [];\n\n  // tslint:disable-next-line:no-empty\n  onChange = (_value: number) => {};\n\n  // tslint:disable-next-line:no-empty\n  onTouched = () => {};\n\n  registerOnChange(fn: (value: number) => void) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void) {\n    this.onTouched = fn;\n  }\n\n  writeValue(value: number) {\n    if (value !== this.value) {\n      this.value = value;\n    }\n  }\n\n  ngOnInit() {\n    for (let i = 0; i < this.count; i++) {\n      this.buttons.push({ active: false, icon: starIcons.outline });\n    }\n\n    this.valueUpdate(this.value);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.value && changes.value.currentValue) {\n      this.valueUpdate(changes.value.currentValue);\n    }\n  }\n\n  rate(index: number) {\n    this.buttons.forEach((btn, i) => {\n      if (i <= index) {\n        btn.icon = starIcons.full;\n      } else {\n        btn.icon = starIcons.outline;\n      }\n    });\n\n    const total = this.buttons.reduce((prev, next) => {\n      if (next.icon === starIcons.full) {\n        return prev + 1;\n      } else {\n        return prev;\n      }\n    }, 0);\n\n    this.value = total;\n  }\n\n  mouseEnter(index: number) {\n    this.buttons.forEach((btn, i) => {\n      if (i <= index) {\n        btn.active = true;\n      } else {\n        btn.active = false;\n      }\n    });\n  }\n\n  mouseLeave() {\n    this.buttons.forEach(i => (i.active = false));\n  }\n\n  private valueUpdate(value: number) {\n    this.buttons.forEach((btn, i) => {\n      const starValue = i + 1;\n\n      if (value >= starValue) {\n        btn.icon = starIcons.full;\n      }\n\n      if (value >= starValue - 0.5 && value < starValue) {\n        btn.icon = starIcons.half;\n      }\n    });\n  }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxInputStarRatingComponent } from './ngx-input-star-rating.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxInputStarRatingComponent\n  ],\n  exports: [\n    NgxInputStarRatingComponent\n  ]\n})\nexport class NgxInputStarRatingModule { }\n"
  ],
  "names": [
    "starIcons",
    "outline",
    "full",
    "half",
    "NgxInputStarRatingComponent",
    "this",
    "_value",
    "count",
    "disabled",
    "buttons",
    "onChange",
    "onTouched",
    "Object",
    "defineProperty",
    "prototype",
    "get",
    "set",
    "val",
    "valueUpdate",
    "registerOnChange",
    "fn",
    "registerOnTouched",
    "writeValue",
    "value",
    "ngOnInit",
    "i",
    "push",
    "active",
    "icon",
    "ngOnChanges",
    "changes",
    "currentValue",
    "rate",
    "index",
    "forEach",
    "btn",
    "total",
    "reduce",
    "prev",
    "next",
    "mouseEnter",
    "mouseLeave",
    "starValue",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "providers",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "multi",
    "Input",
    "NgxInputStarRatingModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports"
  ],
  "mappings": "mXAAA,IAGMA,GACJC,QAAS,UACTC,KAAM,OACNC,KAAM,QAkERC,EAAA,wBAYAC,KAAAC,OAA2B,EAC3BD,KAAAE,MAAmB,EACnBF,KAAAG,UAAsB,EAEtBH,KAAAL,UAAuBA,EAEvBK,KAAAI,WAGAJ,KAAAK,SAAa,SAACJ,KAGdD,KAAAM,UAAc,oBAvBZC,OAAFC,eAAMT,EAANU,UAAA,SAAAC,IAAE,WACE,OAAOV,KAAKC,QAGhBU,IAAE,SAAUC,GACRZ,KAAKC,OAASW,EACdZ,KAAKK,SAASO,GACdZ,KAAKa,YAAYb,KAAKC,QACtBD,KAAKM,6CAiBPP,EAAFU,UAAAK,iBAAE,SAAiBC,GACff,KAAKK,SAAWU,GAGlBhB,EAAFU,UAAAO,kBAAE,SAAkBD,GAChBf,KAAKM,UAAYS,GAGnBhB,EAAFU,UAAAQ,WAAE,SAAWC,GACLA,IAAUlB,KAAKkB,QACjBlB,KAAKkB,MAAQA,IAIjBnB,EAAFU,UAAAU,SAAE,WACE,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,KAAKE,MAAOkB,IAC9BpB,KAAKI,QAAQiB,MAAOC,QAAQ,EAAOC,KAAM5B,EAAUC,UAGrDI,KAAKa,YAAYb,KAAKkB,QAGxBnB,EAAFU,UAAAe,YAAE,SAAYC,GACNA,EAAR,OAAyBA,EAAzB,MAAuCC,cACjC1B,KAAKa,YAAYY,EAAvB,MAAqCC,eAInC3B,EAAFU,UAAAkB,KAAE,SAAKC,GACH5B,KAAKI,QAAQyB,QAAQ,SAACC,EAAKV,GAEvBU,EAAIP,KADFH,GAAKQ,EACIjC,EAAUE,KAEVF,EAAUC,UAIzB,IAAMmC,EAAQ/B,KAAKI,QAAQ4B,OAAO,SAACC,EAAMC,GACvC,OAAIA,EAAKX,OAAS5B,EAAUE,KACnBoC,EAAO,EAEPA,GAER,GAEHjC,KAAKkB,MAAQa,GAGfhC,EAAFU,UAAA0B,WAAE,SAAWP,GACT5B,KAAKI,QAAQyB,QAAQ,SAACC,EAAKV,GAEvBU,EAAIR,OADFF,GAAKQ,KAQb7B,EAAFU,UAAA2B,WAAE,WACEpC,KAAKI,QAAQyB,QAAQ,SAAAT,GAAzB,OAA+BA,EAAEE,QAAS,KAGhCvB,EAAVU,UAAAI,YAAU,SAAYK,GAClBlB,KAAKI,QAAQyB,QAAQ,SAACC,EAAKV,GACzB,IAAMiB,EAAYjB,EAAI,EAETiB,GAATnB,IACFY,EAAIP,KAAO5B,EAAUE,MAGVwC,EAAY,IAArBnB,GAA4BA,EAAQmB,IACtCP,EAAIP,KAAO5B,EAAUG,WAjG7B,kBA/DAwC,KAACC,EAAAA,UAADC,OACEC,SAAU,wBACVC,SAAU,0sCAyBVC,QAAS,oaA4BTC,YAEIC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAjD,IAC9BkD,OAAO,gEAgBbhD,SAAAqC,KAAGY,EAAAA,MAAHV,MAAS,WACTtC,QAAAoC,KAAGY,EAAAA,QACH/C,WAAAmC,KAAGY,EAAAA,SCtFH,IAAAC,EAAA,4BAKAb,KAACc,EAAAA,SAADZ,OACEa,SACEC,EAAAA,cAEFC,cACExD,GAEFyD,SACEzD"
}
