import { forwardRef, Component, Input, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const starIcons = {
    outline: 'outline',
    full: 'full',
    half: 'half'
};
class NgxInputStarRatingComponent {
    constructor() {
        this._value = 0;
        this.count = 5;
        this.disabled = false;
        this.starIcons = starIcons;
        this.buttons = [];
        // tslint:disable-next-line:no-empty
        this.onChange = (_value) => { };
        // tslint:disable-next-line:no-empty
        this.onTouched = () => { };
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.onChange(val);
        this.valueUpdate(this._value);
        this.onTouched();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.value) {
            this.value = value;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        for (let /** @type {?} */ i = 0; i < this.count; i++) {
            this.buttons.push({ active: false, icon: starIcons.outline });
        }
        this.valueUpdate(this.value);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["value"] && changes["value"].currentValue) {
            this.valueUpdate(changes["value"].currentValue);
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    rate(index) {
        this.buttons.forEach((btn, i) => {
            if (i <= index) {
                btn.icon = starIcons.full;
            }
            else {
                btn.icon = starIcons.outline;
            }
        });
        const /** @type {?} */ total = this.buttons.reduce((prev, next) => {
            if (next.icon === starIcons.full) {
                return prev + 1;
            }
            else {
                return prev;
            }
        }, 0);
        this.value = total;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    mouseEnter(index) {
        this.buttons.forEach((btn, i) => {
            if (i <= index) {
                btn.active = true;
            }
            else {
                btn.active = false;
            }
        });
    }
    /**
     * @return {?}
     */
    mouseLeave() {
        this.buttons.forEach(i => (i.active = false));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    valueUpdate(value) {
        this.buttons.forEach((btn, i) => {
            const /** @type {?} */ starValue = i + 1;
            if (value >= starValue) {
                btn.icon = starIcons.full;
            }
            if (value >= starValue - 0.5 && value < starValue) {
                btn.icon = starIcons.half;
            }
        });
    }
}
NgxInputStarRatingComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-input-star-rating',
                template: `<div class="input-rating" (mouseleave)="mouseLeave()">
  <button type="button" [disabled]="disabled" *ngFor="let btn of buttons; let i = index" class="input-rating__btn" (click)="rate(i)" [attr.aria-label]="'rate ' + (i + 1) + ' of ' + buttons.length"
    (mouseenter)="mouseEnter(i)">
    <span *ngIf="btn.active || btn.icon === starIcons.full" class="full">
      <ng-container *ngTemplateOutlet="star"></ng-container>
    </span>
    <ng-container *ngIf="!btn.active">
      <span *ngIf="btn.icon === starIcons.half" class="half">
        <ng-container *ngTemplateOutlet="star"></ng-container>
        <svg height="25" width="10" class="star-half">
          <polygon points="9.9, 1.1, 3.3, 21.78, 19.8, 8.58, 0, 8.58, 16.5, 21.78" style="fill-rule:nonzero;"/>
        </svg>
      </span>
      <span *ngIf="btn.icon !== starIcons.full && btn.icon !== starIcons.half" class="empty">
        <ng-container *ngTemplateOutlet="star"></ng-container>
      </span>
    </ng-container>
  </button>
</div>
<ng-template #star>
  <svg height="25" width="23" class="star">
    <polygon points="9.9, 1.1, 3.3, 21.78, 19.8, 8.58, 0, 8.58, 16.5, 21.78" style="fill-rule:nonzero;"/>
  </svg>
</ng-template>`,
                styles: [`*, *::before, *::after{
  -webkit-box-sizing:border-box;
          box-sizing:border-box; }
:host{
  display:inline-block; }
.star{
  fill:#ccc; }
.full .star{
  fill:gold; }
.half .star-half{
  fill:gold; }
button{
  background-color:transparent;
  border:0;
  cursor:pointer;
  position:relative;
  width:30px;
  height:25px; }
  button svg{
    position:absolute;
    top:0;
    left:5px; }
`],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NgxInputStarRatingComponent),
                        multi: true
                    }
                ]
            },] },
];
/** @nocollapse */
NgxInputStarRatingComponent.ctorParameters = () => [];
NgxInputStarRatingComponent.propDecorators = {
    "_value": [{ type: Input, args: ['value',] },],
    "count": [{ type: Input },],
    "disabled": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxInputStarRatingModule {
}
NgxInputStarRatingModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    NgxInputStarRatingComponent
                ],
                exports: [
                    NgxInputStarRatingComponent
                ]
            },] },
];
/** @nocollapse */
NgxInputStarRatingModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { NgxInputStarRatingModule, NgxInputStarRatingComponent as Éµa };
//# sourceMappingURL=ngx-input-star-rating.js.map
